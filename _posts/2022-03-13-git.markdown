---
layout: post
read_time: true
show_date: true
title:	Git
date:   2022-03-13 10:12:32 -0600
description : git term
tags: [git, jekyll blog, jekyll]
author: HyunHwa
github: hyunnna
mathjax: yes # leave empty or erase to prevent the mathjax javascript from loading

# toc: yes # leave empty or erase for no TOC
---
<br />

###### 흐극.... 블로그 만들면서 쉬운게 하나도 없었다... 아무도 안보겠지만 나같은 사람을 위해소.. 오류들 짜집기하기....

<br />

# Git  

* ### 기존 프로젝트 를 git repository 에 연결하기  
1. 기존 프로젝트 폴더 내에 git bash 등 으로 진입  
`
cd myproject
`  

2. git 초기화  
`
git init
`  

    <span style="background-color: blue">완료 메세지 : Initialized empty Git reposioty in C:/myproject/.git/</span>  
    <br />
또는 기존 github에 있는 저장소를 내 로컬로 복제도 가능  
`
git clone (git 저장소 URL)  
`  



3. github 또는 bitbucket 등 프로젝트를 연결할 repository 생성 - (README 등 파일 생성 없이 빈 레포지토리로 생성 권장)  

    README 파일을 생성하면 최초 커밋 시 파일 기록이 달라서 오류 발생할 확률이 높음  

4. repository 연결  

    `
    git remote add origin username@github.com/myname/myprojekyt.git
    `   
    
    repository 주소 붙여넣기  
    
    연결된 repo 확인  

    `
    git remote -v
    `  

5. 새 repository에서 내용을 pull , git history 동기화  

    `
    git pull origin master
    `

6. 새 repository에 파일을 업로드 하기 위해 스테이지에 파일을 올림  

    `
    git add .
    `  

    git add . 은 모든 파일을 repo에 올린다는 뜻이다.  


7. 최초 커밋  

    `
    git commit -m "first commit"  
    `

    " " 에는 아무 메시지나 넣어도 된다.  

8. repository에 파일 업로드  

    `
    git push -u origin master
    `    

    -u는 git pull / git push 를 할 때 origin master을 지정하지 않아도 알아서 origin master 으로 붙여서 가져오는 옵션이다.  
<br />

* 현재 git의 상태 알기  
    `
    git status
    `   
<br />
* git update  
    ```
    git add.
    git commit -m "___"
    git push origin master
    ```

<br />

***

## Fix Jekyll Errors  

***
<br />

- 에러 메세지  

    ```  
    fatal: 'development' does not appear to be a git repository
     fatal: Could not read from remote repository.

    Please make sure you have the correct access rights and the repository exists.
    ```

- 해결 방법  
    1. 원격 저장소 정보 업데이트  
    remote update를 통해 변경된 branch 정보 업데이트하기  

        `
        git remote update
        `  
    <br />
    2. 원격 저장소 연결 제거 후 재연결  
        (1) 원격 저장소 연결 상태 확인  
        `
        git remote -v
        `  

        (2) 원격 저장소 연결 제거  
        `
        git remote remove [원격 저장소 이름 (ex: origin, master, main)]  
        `

        (3) 원격 저장소 재연결  
        `
        git remote add [새로운 원격 저장소 이름(ex: origin)] [github 원격 저장소 URL]
        `  

        (4) 원격 저장소 연결 재확인  
        `
        git remote -v
        `  

        위 명령어 후 원격 저장소 이름 , URL이 각각 출력되면 정상적으로 원격 저장소에 연결 된 것이다.  
        ```
        origin https://github.com/username/github-repository-name.git (fetch)  
        origin https://github.com/username/github-repository-name.git (fetch)
        ```  

***

 <br />

- 에러 메세지  

    ```  
    git permission denied (publickey). fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists
    ```

- 문제  
git pull과 push를 하면서 에러가 남. 다른 사람은 기존과 다른 PC에서 접속 했다는데 본인은 사용자명을 바꿔서 그런것 같다..   
<br /> 
    git은 SSH 또는 http 기반으로 사용을 하게되는데 PC마다 SSH key를 등록해주어야 한다.  
<br /> 

- 해결 방법  
    1. cmd 창에 ssh key 생성 명령어를 입력한다.  
    `
    $ ssh-keygen -t rsa -C "[본인의 github 계정 이메일 주소]"
    `  
    2. 계속 Enter 입력(본인 컴퓨터는 어떤 그림 나올 때까지 눌러야 key생성이 되었당! ) id_rsa 파일이 생성되고 경로는 
        ```
        C:\Users\[사용자]\.ssh\id_rsa  
        ```
    3. 비밀번호를 원하면 비밀번호 입력 ,아니면 계속 Enter  

    4. SSH key 생성됨.  
    
    5. Github에 Setting 메뉴로 이동  
    6. Settings에서 SSH keys를 누르고 <span style="color: #fff; background-color:green">New SSH key</span> 
    버튼 누르기  
    7. .ssh 폴더에 id_rsa <span style="color: #000; background-color:beige">.pub </span>파일을 메모장이나 NotePad로 열어보면 key값이 보인다. <span style="color: #000; background-color:beige">전체복사</span>해서 SSH key 값 입력하는 곳에 붙여넣기.  

        <span style="color: #000;color:yellow"> + 여기서 주의!! 꼭 id_rsa **.pub** 이어야한다. 아니면 아래와 같은 오류가 뜬다. 그리고 전체복사도 잊지말기!!</span>
        ```
        Key is invalid. You must supply a key in OpenSSH public key format
        ```  
        


    8. 다시 시도하기!
        ```
        git add .  
        git commit  
        git push   
        ```
        
    <br />

***
